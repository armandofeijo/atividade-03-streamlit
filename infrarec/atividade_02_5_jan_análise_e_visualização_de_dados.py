# -*- coding: utf-8 -*-
# """Atividade 02 - 5-jan Análise e Visualização de Dados.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1RBPrFUS12Yw3Ot_3-WwwdMlOzn0JjZX8

# #Equipe Sala 5

# ###Andréa Fonseca
# ###Thiago José de Queiroz
# ###Armando Feijó de Paula

# # Exercícios Análise de Dados


# Resumo

# Leitura e Escrita de Dados:

# - `pd.read_csv()`: Para ler dados de um arquivo CSV em um DataFrame.
# - `pd.read_excel()`: Para ler dados de uma planilha Excel em um DataFrame.
# - `pd.read_sql()`: Para ler dados de um banco de dados SQL em um DataFrame.
# - `df.to_csv()`: Para salvar um DataFrame em um arquivo CSV.
# - `df.to_excel()`: Para salvar um DataFrame em um arquivo Excel.

# Estruturação e Inspeção de Dados:

# - `pd.DataFrame()`: Cria um DataFrame a partir de dados em Python (listas, dicionários, arrays, etc.).

# - `df.head()`, `df.tail()`: Exibe as primeiras ou últimas linhas do DataFrame.

# - `df.shape`: Retorna a dimensão (número de linhas e colunas) do DataFrame.

# - `df.info()`: Retorna informações sobre o DataFrame, incluindo tipos de dados e valores não nulos.

# - `df.describe()`: Gera estatísticas descritivas para as colunas numéricas do DataFrame.

# Seleção e Indexação:

# - `df[column_name]` ou `df.loc[:, column_name]`: Seleciona uma coluna do DataFrame.

# - `df.iloc[row_index]`: Seleciona uma linha do DataFrame pelo índice inteiro.
# - `df.loc[row_label]`: Seleciona uma linha do DataFrame pelo rótulo do índice.
# - `df.iloc[start_row:end_row, start_col:end_col]`: Seleciona um subconjunto do DataFrame usando índices inteiros.
# - `df.loc[start_label:end_label, start_col:end_col]`: Seleciona um subconjunto do DataFrame usando rótulos de índice.

# Filtragem e Consultas:

# - `df[df['column'] > value]`: Filtra o DataFrame com base em uma condição.
# - `df.query('condition')`: Filtra o DataFrame usando uma string de consulta.
# - `df.isnull(), df.notnull()`: Verifica quais valores são nulos ou não nulos.
# - `df[df['column'].isin([value1, value2])]`: Filtra o DataFrame com base em valores específicos.

# Operações de Agregação:

# - `df.groupby()`: Agrupa o DataFrame com base em uma ou mais colunas.
# - `grouped_df.agg()`: Executa operações de agregação em grupos de dados.
# - `df.sum(), df.mean(), df.min(), df.max()`: Calcula a soma, média, valor mínimo e valor máximo das colunas numéricas.

# Operações de Limpeza:

# - `df.dropna()`: Remove linhas com valores nulos do DataFrame.
# - `df.fillna(value)`: Preenche valores nulos com um valor específico.
# - `df.drop()`: Remove colunas ou linhas do DataFrame.

# 0. inportar Dataset
# """

#from google.colab import drive

# Mount your Google Drive
#drive.mount('/content/drive')

"""## 1. Importar Numpy, Matplotylib, seaborn, Plotly & Pandas"""

import pandas as pd
import seaborn as sns
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import os

# Caminho do arquivo
FILE_PATH = 'data/infrarec.csv'

# Verificar se o arquivo existe
if os.path.exists(FILE_PATH):
    print("O arquivo e/ou pasta existe! Assim, a importação foi realizada")
else:
    print("ERRO! O arquivo/pasta não existe. Erro ao importar.")

# Carregar o DataFrame
df = pd.read_csv(FILE_PATH, sep=';', encoding='latin-1')

# Listar os primeiros 4 elementos do dataframe
print(df.head(4))

# Verificar valores ausentes
sns.heatmap(df.isnull(), yticklabels=False, cbar=False)

# Análise exploratória das infrações de trânsito
df['infracao_texto'] = df['infracao'].astype(str)
top_infracoes = df.groupby(by=['descricaoinfracao'])['descricaoinfracao'].count().sort_values(ascending=False).head(10)

# Criar DataFrame com as top 10 infrações
df_top10_infracoes = top_infracoes.reset_index(name='quantidade')
total_outros = top_infracoes[10:].sum()
df_top10_infracoes.loc[len(df_top10_infracoes)] = ['Outros tipos de Infrações', total_outros]

# Plotar gráfico usando Seaborn
plt.figure(figsize=(10, 6))
ax = sns.barplot(y='descricaoinfracao', x='quantidade', data=df_top10_infracoes)
ax.set_title('Top 10 tipos de Infrações de Trânsito em Recife - PE, no ano de 2023')
ax.set_xlabel('Qtde. de Infrações')
ax.set_ylabel('Infração')

# Plotar gráfico usando Plotly
fig = go.Figure(data=[go.Pie(labels=df_top10_infracoes['descricaoinfracao'], values=df_top10_infracoes['quantidade'])])
fig.update_layout(title="Top 10 Infrações de Trânsito mais recorrentes em 2023 na cidade de Recife")
fig.show()



df['infracao_texto'] = df['infracao'].astype(str)

df1 = df['infracao'].value_counts()
df1.head()

df2 = df['descricaoinfracao'].unique()
df2.shape
# como o resultado aqui deu 255 e é diferente do df3 e df4 (abaixo), que são 182,
# muito provavelmente a coluna 'descricaoinfracao' tem valores diferentes
# para um mesmo código de infracao (coluna 'infracao')

df3 = df['infracao'].unique()
df3.shape

df4 = df['infracao_texto'].unique()
df4.shape

top_infracoes = df.groupby(by=['descricaoinfracao'])['descricaoinfracao'].count().sort_values(ascending=False)

top_infracoes.head(10) # top 10, 80% do total de infrações 20% dos tipos de infrações

# Criar um novo DataFrame com as primeiras 35 linhas de top_infracoes
df_top10_infracoes = top_infracoes.head(10).reset_index(name='quantidade')

# Exiba o novo DataFrame
print(df_top10_infracoes)

#Calcule o total das demais linhas de top_infracoes
total_outros = top_infracoes[10:].sum()

# Adicione uma nova linha ao final do df_top35_infracoes
df_top10_infracoes.loc[len(df_top10_infracoes)] = ['Outros tipos de Infrações', total_outros]

# Exiba o DataFrame atualizado
print(df_top10_infracoes)

"""#5. Plotar Gráfico usando Seaborn"""

# Criar gráfico de violino
ax = sns.violinplot(y=df_top10_infracoes['quantidade'], x=df_top10_infracoes['descricaoinfracao'], color='lightgray')

# Adicionar barras ao lado do gráfico de violino
barplot = sns.barplot(y=df_top10_infracoes['quantidade'], x=df_top10_infracoes['descricaoinfracao'], ax=ax, color='skyblue')

# Adicionar título ao gráfico
ax.set_title('Distribuição de Infrações por Tipo')

# Renomear rótulos dos eixos x e y
ax.set_xlabel('Infração')
ax.set_ylabel('Quantidade')

# Girar os rótulos do eixo x em 90 graus
ax.set_xticklabels(ax.get_xticklabels(), rotation=90)

# Adicionar valores percentuais no topo das barras
for p in barplot.patches:
    barplot.annotate(f'{p.get_height()/sum(df_top10_infracoes["quantidade"])*100:.2f}%',
                     (p.get_x() + p.get_width() / 2., p.get_height()),
                     ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=8)

# Aumentar o eixo y para 150,000
ax.set_ylim(0, 150000)

# Exibir o gráfico
plt.show()

"""#6. Plotar Gráfico usando Plotly"""

plt.figure(figsize=(12, 6))
plt.barh(df_top10_infracoes.descricaoinfracao, df_top10_infracoes.quantidade)  # Corrigido aqui

plt.xticks(rotation=45, ha='right', fontsize=8)

plt.title("Top 10 tipos de Infrações de Trânsito em Recife - PE, no ano de 2023")
plt.xlabel("Qtde. de Infrações")

plt.tight_layout()
plt.show()

"""## Gráfico de Pizza das Top 10 Infrações de Trânsito mais recorrentes em 2023 na cidade de Recife"""

y_val = df_top10_infracoes['quantidade']

data = [
    go.Pie(
        labels=df_top10_infracoes['descricaoinfracao'].astype(str),
        values=y_val,
        insidetextorientation='radial',
        #textinfo='label+percent',
        hole=0.5,
        marker=dict(colors=['#483D8B', '#DB7093', '#8FBC8F', '#E9967A', '#CD853F', '#00FFFF'])
    )
]

layout = go.Layout(
    title="Top 10 Infrações de Trânsito mais recorrentes em 2023 na cidade de Recife",
    plot_bgcolor='#00ff00'
)

fig = go.Figure(data=data, layout=layout)

fig.show()